version: '3.8'
networks:
  k6:
  grafana:
services:
  influxdb:
    image: influxdb:1.8
#    entrypoint: /bin/sh
#    user: root
    networks:
      - k6
      - grafana
    ports:
      - "8086:8086"
    environment:
      - INFLUXDB_DB=k6

  grafana:
    image: grafana/grafana:latest
#    entrypoint: /bin/sh
#    user: root
    networks:
      - grafana
    ports:
      - "3000:3000"
    environment:
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_BASIC_ENABLED=false
    volumes:
      - ./dashboards:/var/lib/grafana/dashboards
      - ./grafana-dashboard.yaml:/etc/grafana/provisioning/dashboards/dashboard.yaml
      - ./grafana-datasource.yaml:/etc/grafana/provisioning/datasources/datasource.yaml
  k6:
      image: loadimpact/k6:latest
  #    entrypoint: /bin/sh
  #    user: root
      networks:
        - k6
      ports:
        - "6565:6565"
      environment:
        - K6_OUT=influxdb=http://influxdb:8086/k6
      volumes:
        - ./scripts:/scripts
      command: k6 run /scripts/ewoks.js
      depends_on:
        - api
  postgres:
      restart: always
      image: "postgres:11"      
      container_name: custom_postgres_11 
      environment:
        - POSTGRES_USER=sebas
        - POSTGRES_PASSWORD=sebas
        - POSTGRES_DB=test
      ports:
        - '5555:5432'
      volumes:
        - pgdata:/var/lib/postgresql/data
      hostname: db
  api:
    build:
      context: ./flaskr/
      dockerfile: Dockerfile
    command: 'python app.py'
    ports:
      - 5000:5000
    depends_on:
      - redis
      - micro_conversion

  micro_conversion:
    build:
      context: ./conversion/flaskr/
      dockerfile: Dockerfile
    command:  python app.py
    volumes:
      - ./download/:/usr/src/app/download/
      - ./uploaded/:/usr/src/app/uploaded/
    ports:
      - 5001:5001
    depends_on:
      - redis
    hostname: micro_conversion

  redis:
    container_name: redis
    image: redis:alpine
    ports:
      - "6379:6379"

  worker:
    build:
      context: ./conversion/flaskr/
      dockerfile: Dockerfile
    command: celery -A tareas worker -l INFO -P solo
    volumes:
      - ./download/:/usr/src/app/download/
      - ./uploaded/:/usr/src/app/uploaded/
    environment:
      CELERY_BROKER_URL: redis://redis
      CELERY_RESULT_BACKEND: redis://redis
    links:
      - redis
    depends_on:
      - redis

 

volumes:
    pgdata:
    redis_data:
    data_app: {} 
